@using Integrant.Element
@using Integrant.Element.Bits
@using Integrant.Element.Components
@using Integrant.Element.Components.Modal
@using Integrant.Colorant.Themes.Solids
@using Integrant.Element.Constructs
@using Integrant.Resources.Icons.MaterialIcons

@inject IJSRuntime JSRuntime

<div class="Integrant.Element.Override.Input">
    <input type="number" step="0.1" @bind-value="@Number" @bind-value:event="oninput"/>
</div>

<br>

@(new Button(() => "Button 1!", _ => { }).Render())
@(new Button(() => "Button blue!", async _ => await Console.Out.WriteLineAsync("async"), () => Button.Color.Blue).Render())
@(new Button(() => "Button green!", _ => { }, () => Button.Color.Green).Render())
@(new Button(() => "Button orange!", _ => { }, () => Button.Color.Orange).Render())
@(new Button(() => "Button purple!", _ => { }, () => Button.Color.Purple).Render())
@(new Button(() => "Button red!", _ => { }, () => Button.Color.Red).Render())
@(new Button(() => "Button yellow!", _ => { }, () => Button.Color.Yellow).Render())

<br>

@(new Button(() => "Button 1!", _ => { }, isDisabled: () => true).Render())
@(new Button(() => "Button blue!", _ => { }, () => Button.Color.Blue, isDisabled: () => true).Render())
@(new Button(() => "Button green!", _ => { }, () => Button.Color.Green, isDisabled: () => true).Render())
@(new Button(() => "Button orange!", _ => { }, () => Button.Color.Orange, isDisabled: () => true).Render())
@(new Button(() => "Button purple!", _ => { }, () => Button.Color.Purple, isDisabled: () => true).Render())
@(new Button(() => "Button red!", _ => { }, () => Button.Color.Red, isDisabled: () => true).Render())
@(new Button(() => "Button yellow!", _ => { }, () => Button.Color.Yellow, isDisabled: () => true).Render())

<br>

@_colorChangingButton.Render()

<br>

@_buttonGroup.Render()

<br>

@(new ToggleButton(() => "Highlighted button!", async _ => { }).Render())

<br>

@checkbox1.Render()
@checkbox2.Render()
@checkbox3.Render()
@checkbox4.Render()
@checkbox5.Render()

<br>

@(new Link(() => "Link 1!", () => "http://localhost:5000/").Render())
@(new Link(() => "Link 2!", () => "http://localhost:5000/", isHighlighted: () => true, isStatic: false).Render())

<br>
<br>

@_multibox1.Render()

<br>
<br>

@* @((new Spinner()).Render()) *@
@* @((new Spinner(() => 100)).Render()) *@
@* @((new Spinner(() => 25)).Render()) *@
@* @((new Spinner(() => 35, thickness: () => 2, display: () => Display.Block)).Render()) *@
@* *@
@* <CenteredSpinner/> *@
@* <CenteredSpinner style="padding: 25px;"/> *@

<br>

@_dropdown1.Render()

<br>
@(new Heading(
    () => "H2 heading #1!", Heading.Size.H2,
    margin: () => new Size(5, 10, 15), padding: () => new Size(3, 6),
    fontSize: () => 2, fontWeight: () => 900, backgroundColor: () => Constants.Blue_7,
    foregroundColor: () => Constants.Blue_7_Text)
    .Render())
<br>
@(new Title(
    () => "Title #1!",
    margin: () => new Size(5, 10, 15), padding: () => new Size(3, 6),
    foregroundColor: () => Constants.Blue_7)
    .Render())
<br>
@(new Heading(
    () => "H3 heading #1!", Heading.Size.H3, display: () => Display.InlineBlock,
    margin: () => new Size(5, 10, 15), padding: () => new Size(3, 6),
    fontWeight: () => 700, backgroundColor: () => Constants.Blue_7,
    foregroundColor: () => Constants.Blue_7_Text)
    .Render())
<br>
@(new Arrow(
    isStatic: false,
    margin: () => new Size(5),
    foregroundColor: () => Constants.Yellow_7,
    fontSize: () => Number
    ).Render())
<br>
@* @(new Icon("play_arrow").Render()) *@
@(new Chip(() => "A chip").Render())
@(new Separator().Render())
@(new ExternalComponent<Icon>(new Attributes {{"ID", "play_arrow"}}).Render())
@(new Separator(pixelsThickness: () => 3, margin: () => new Size(0, 5)).Render())
@(new Chip(() => "A chip", backgroundColor: () => Constants.Red_7, foregroundColor: () => Constants.Red_7_Text).Render())
@* @(new Separator(20, 10, 3, "green").Render()) *@
@(new Chip(() => "A chip", backgroundColor: () => Constants.Yellow_0, foregroundColor: () => Constants.Yellow_0_Text, padding: () => new Size(5, 10), fontSize: () => 2, fontWeight: () => 600).Render())
<br>
@(new Image(() => "https://www.google.com/favicon.ico").Render())
@(new Image(() => "https://www.google.com/favicon.ico", pixelsHeight: () => 25, backgroundColor: () => Constants.Green_7).Render())
@(new Image(() => "https://www.google.com/favicon.ico", pixelsHeight: () => 25, pixelsWidth: () => 50, backgroundColor: () => Constants.Green_7).Render())
<br>
@(new MonoBlock(() => "MonoBlock content").Render())
@(new MonoBlock(() => "MonoBlock content", fontWeight: () => 600, fontSize: () => 1.5, padding: () => new Size(10, 0)).Render())

<ModalContent Modal="@_modal1">
    <ModalHeading>Modal 1 content!</ModalHeading>
    <p>asdf</p>
    <br>
    @(new Chip(() => "A chip", backgroundColor: () => Constants.Red_7, foregroundColor: () => Constants.Red_7_Text).Render())
</ModalContent>
